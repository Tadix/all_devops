name: 'devops'

services:
  javadb:
    image: postgres:14.12-alpine
    restart: always
    container_name: javadb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ecm

  nodedb:
    image: postgres:14.12-alpine
    container_name: nodedb
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    networks:
      - ecm

  mongodb:
    image: mongo:7.0.11
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodb
      MONGO_INITDB_ROOT_PASSWORD: mongodb
      MONGO_INITDB_DATABASE: pythondb
    ports:
      - 27017:27017
    volumes:
      - ./pythonapp/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - ecm

  javaapi:
    container_name: javaapp
    build: ./javaapp
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://javadb/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    healthcheck:
      test: curl http://localhost:8080/
      interval: 40s
      timeout: 40s
      retries: 5
      start_period: 40s
    depends_on:
      javadb:
        condition: service_healthy
    networks:
      - ecm

  pythonapi:
    container_name: pythonapp
    build: ./pythonapp
    environment:
      FLASK_APP: app.py
      FLASK_RUN_HOST: 0.0.0.0
      ENVIRONMENT: prod
      DATABASE_HOST: mongodb
      DATABASE_PORT: 27017
      DATABASE_USERNAME: mongodb
      DATABASE_PASSWORD: mongodb
    ports:
      - "8082:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ecm

  nodeapi:
    build: ./nodeapp
    container_name: nodeapp
    ports:
      - "3000:3000"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=nodedb
      - POSTGRES_PORT=5434
      - NODE_ENV=qua
    networks:
      - ecm

  reactui:
    container_name: reactui
    build: ./reactui
    depends_on:
      javaapi:
        condition: service_healthy
    networks:
      - ecm
    ports:
      - "8083:80"

  ngui:
    build:
      context: ./ngui
      dockerfile: Dockerfile
    container_name: ngui
    ports:
      - "8084:80"
    networks:
      - ecm

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - ngui
      - reactui
    networks:
      - ecm

  jenkins:
   image: jenkins/jenkins:lts
   container_name: jenkins
   user: root
   ports:
     - "8006:8080"
   networks:
     - ecm
   volumes:
       - jenkins_data:/var/jenkins_home
networks:
  ecm:
    driver: bridge
volumes:
  jenkins_data:
